{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GiftGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","event","preventDefault","trim","length","categories","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GiftGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAERC,mBAAS,IAFD,mBAErCC,EAFqC,KAEzBC,EAFyB,KAsB5C,OACI,sBAAMC,SAbW,SAACC,GAClBA,EAAMC,iBAEHJ,EAAWK,OAAOC,OAAS,IAE9BR,GAAe,SAAAS,GAAU,OAAKP,GAAL,mBAAoBO,OAC7CN,EAAc,MAOd,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAvBc,SAACP,GAEvBF,EAAcE,EAAMQ,OAAOF,a,+BCNtBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAGbC,EAHa,iDAGoCC,UAAUH,GAH9C,8DAIAI,MAAOF,GAJP,cAIbG,EAJa,gBAKEA,EAAKC,OALP,uBAKZC,EALY,EAKZA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAClB,MAAM,CACFC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QAXtB,kBAeZM,GAfY,4CAAH,sDCDPO,EAAc,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IACjC,OACI,sBAAKc,UAAU,2DAAf,UACI,qBAAKC,IAAOf,EAAMgB,IAAON,IACzB,kCAAKA,EAAL,WCDCO,EAAW,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECEZ,SAAEA,GAAe,IAAD,EAEdd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAJ2B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAoBxC,OAbCC,qBAAU,WAEPxB,EAASC,GACJwB,MAAM,SAAAC,GAECH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAI1B,CAAEpB,IAEEqB,EDpByBK,CAAc1B,GAAlCa,EAFwB,EAE7BN,KAAaa,EAFgB,EAEhBA,QAEpB,OAEI,qCAEA,oBAAIJ,UAAU,oCAAd,SAAoDhB,IAElDoB,GAAW,mBAAGJ,UAAU,mCAAb,qBAEb,qBAAKA,UAAU,YAAf,SAIYH,EAAOJ,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAEQA,GADGA,EAAIC,aEnB1BgB,EAAe,WAAO,IAAD,EAEMzC,mBAAS,CAAC,WAFhB,mBAEvBQ,EAFuB,KAEXT,EAFW,KAU9B,OACI,qCACG,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BAEIS,EAAWe,KAAI,SAAAT,GAAQ,OACnB,cAAC,EAAD,CAEKA,SAAUA,GADLA,Y,MCjB7B4B,IAASC,OAEL,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.2118a383.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddCategory = ({setCategories}) => {//Lo que sea que se envie desde el fichero padre es lo que recibira aca desestructurado\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = (event) =>{\r\n        //renderizada automaticamente a medida que se va ingresando valores en el input\r\n        setInputValue(event.target.value);\r\n    }\r\n    //el inputValue siempre va a ser el ultimo valor actualizado del que el usuario escribio\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        if(inputValue.trim().length > 2) {//el trim elimina posibles espacios en blanco\r\n        //recibo el arreglo desde el elemento padre y le agrego el valor actual del input al presionar enter\r\n        setCategories( categories => [inputValue, ...categories]);//primero se muestra lo ultimo ingresado y luego el resto del array\r\n        setInputValue('');//limpia el input y lo deja vacio\r\n        }\r\n        \r\n       \r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input \r\n                type=\"text\" \r\n                value={inputValue}//el inputValue siempre va a ser el ultimo valor actualizado del que el usuario escribio\r\n                onChange={handleInputChange}\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}","\r\n\r\n\r\nexport const getGifs = async( category ) =>{\r\n\r\n    //encodeURI es un metodo js que elimina espacios vacios. y se usa la interpolacion para pasar directamente lo que se recibe en category a la peticion http\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=5&api_key=b0nkunM3yZbSM7v0IzGledc7UPxxufmt`\r\n    const resp = await fetch (url);\r\n    const {data} = await resp.json();\r\n\r\n    const gifs = data.map(img => {\r\n        return{\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images.downsized_medium.url\r\n        }\r\n    });\r\n\r\n    return gifs;\r\n\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ( {title, url} ) => {\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn animate__delay-1s\">\r\n            <img src= { url } alt= { title } />\r\n            <p> {title} </p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\n\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GiftGrid = ({category}) => {\r\n    //Cuando el usuario ingrese una nueva busqueda en el input se llamara al hook FetchGifs para realizar la peticion y renderizar los nuevos datos en la pagina\r\n    const{ data:images, loading } = useFetchGifs( category );\r\n\r\n    return (\r\n        \r\n        <>\r\n\r\n        <h3 className=\"animate__animated animate__fadeIn\">{ category }</h3>\r\n\r\n        { loading && <p className=\"animate__animated animate__flash\">Loading</p> }\r\n\r\n        <div className=\"card-grid\">\r\n            \r\n                {\r\n                    //renderiza en pantalla cada titulo obtenido en la peticion\r\n                    images.map( img  => (\r\n                        <GifGridItem \r\n                            key= { img.id }\r\n                            {...img} \r\n                            />\r\n                    ))\r\n\r\n                }\r\n            \r\n        </div>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\n","//es el fichero donde se realizara la peticion http cada vez que se ingrese una nueva categoria en el input\r\n\r\n//los customs hooks se utilizan como functional components\r\nimport { useEffect, useState } from \"react\"\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n     useEffect(() => {\r\n\r\n        getGifs( category )\r\n            .then( imgs => {\r\n\r\n                    setState({\r\n                        data: imgs,\r\n                        loading: false\r\n                    });\r\n            } )\r\n        \r\n    }, [ category ])\r\n\r\n    return state;\r\n}","import React, {useState} from 'react'\r\nimport { AddCategory } from './components/AddCategory'\r\nimport { GiftGrid } from './components/GiftGrid'\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState(['Naruto']);\r\n\r\n  /*   const handleAdd = () => {\r\n        setCategories([...categories, 'One Piece']);//forma de agregar o modificar un arreglo\r\n        \r\n        setCategories( categories => [...categories, 'One Pice']);\r\n    } */\r\n\r\n    return (\r\n        <>\r\n           <h2>GifExpertApp</h2> \r\n           <AddCategory setCategories={setCategories}/>\r\n           <hr/>\r\n\r\n           <ul>\r\n               {//le envia lo que hay en el arreglo, luego hace consulta a la api con los elementos coincidentes dentro del array\r\n               categories.map(category => (\r\n                   <GiftGrid \r\n                        key={category}     \r\n                        category={category} \r\n                    />\r\n               ))\r\n               }\r\n           </ul>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { GifExpertApp } from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n\n    <GifExpertApp />,\n    document.getElementById('root')\n    \n);"],"sourceRoot":""}